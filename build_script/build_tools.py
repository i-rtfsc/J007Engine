#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# -*- encoding: utf-8 -*-
#
# Copyright (c) 2021 anqi.huang@outlook.com
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


import optparse
import os

from git import Git


class Generator:
    OUT_FILE_NAME = "BuildConfig.java"
    mOutConfDir = ''
    mOutConfPath = ''

    def __init__(self, outdir_root_dir):
        self.mOutConfDir = os.path.join(outdir_root_dir, "java/com/journeyOS/J007engine/")
        self.mOutConfPath = os.path.join(self.mOutConfDir, self.OUT_FILE_NAME)
        pass

    def generate(self, config_dict):
        if not os.path.exists(self.mOutConfDir):
            os.makedirs(self.mOutConfDir)

        with open(self.mOutConfPath, 'w+') as f:
            f.write("//This is auto generated by build_tools.py, don't modify.\n")
            f.write("package com.journeyOS.J007engine;\n\n")
            f.write("public final class BuildConfig {\n\n")

            for key, value in config_dict.items():
                if type(value) is int:
                    f.write("    public static final int " + key + " = " + str(value) + ";\n")
                    pass
                elif type(value) is bool:
                    f.write("    public static final boolean " + key + " = " + str(value).lower() + ";\n")
                    pass
                else:
                    f.write("    public static final String " + str(key) + " = " + "\"" + value + "\"" + ";\n")
                    pass

            f.write("\n}\n")
            f.close()


def parseargs():
    usage = "usage: %prog [options] arg1 arg2"
    parser = optparse.OptionParser(usage=usage)

    option_group = optparse.OptionGroup(parser, "auto generated BuildConfig options")

    option_group.add_option("-o", "--out", dest="out",
                            default="./vendor/journeyOS/proprietary/J007Engine/package/J007Service/build/",
                            help="out dir")
    option_group.add_option("-l", "--local", dest="local", default="./vendor/journeyOS/proprietary/J007Engine/",
                            help="local dir")

    parser.add_option_group(option_group)

    (options, args) = parser.parse_args()

    return (options, args)


def main():
    (options, args) = parseargs()
    out_dir = options.out.strip()
    local_dir = options.local.strip()
    # get git info
    git = Git(local_dir)
    version_code, version_name = git.get_info()
    # init filed dict
    features = {}
    features["BUILD_VERSION_CODE"] = int(version_code)
    features["BUILD_VERSION_NAME"] = version_name
    features["DEBUG"] = True

    generator = Generator(out_dir)
    generator.generate(features)

    return 0


if __name__ == "__main__":
    main()
